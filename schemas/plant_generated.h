// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLANT_ECOSYSTEM_H_
#define FLATBUFFERS_GENERATED_PLANT_ECOSYSTEM_H_

#include "flatbuffers/flatbuffers.h"

namespace Ecosystem {

struct Plant;
struct PlantBuilder;

struct Plant FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlantBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_YEAR = 4,
    VT_POPULATION = 6,
    VT_MATABLE_POPULATION = 8,
    VT_CONCEIVING_PROBABILITY = 10,
    VT_MATING_PROBABILITY = 12,
    VT_MATING_AGE_START = 14,
    VT_MATING_AGE_END = 16,
    VT_MAX_AGE = 18,
    VT_MUTATION_PROBABILITY = 20,
    VT_OFFSPRINGS_FACTOR = 22,
    VT_AGE_FITNESS_ON_DEATH_RATIO = 24,
    VT_HEIGHT_ON_VITALITY = 26,
    VT_WEIGHT_ON_VITALITY = 28,
    VT_THEORETICAL_MAXIMUM_BASE_HEIGHT = 30,
    VT_THEORETICAL_MAXIMUM_BASE_VITALITY = 32,
    VT_THEORETICAL_MAXIMUM_BASE_WEIGHT = 34,
    VT_THEORETICAL_MAXIMUM_HEIGHT = 36,
    VT_THEORETICAL_MAXIMUM_WEIGHT = 38,
    VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER = 40,
    VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER = 42,
    VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER = 44,
    VT_AVERAGE_GENERATION = 46,
    VT_AVERAGE_IMMUNITY = 48,
    VT_AVERAGE_AGE = 50,
    VT_AVERAGE_HEIGHT = 52,
    VT_AVERAGE_WEIGHT = 54,
    VT_AVERAGE_MAX_VITALITY_AT_AGE = 56,
    VT_AVERAGE_STATIC_FITNESS = 58,
    VT_AVERAGE_AGE_DEATH_FACTOR = 60,
    VT_AVERAGE_FITNESS_DEATH_FACTOR = 62,
    VT_AVERAGE_DEATH_FACTOR = 64
  };
  uint64_t year() const {
    return GetField<uint64_t>(VT_YEAR, 0);
  }
  bool KeyCompareLessThan(const Plant *o) const {
    return year() < o->year();
  }
  int KeyCompareWithValue(uint64_t val) const {
    return static_cast<int>(year() > val) - static_cast<int>(year() < val);
  }
  uint64_t population() const {
    return GetField<uint64_t>(VT_POPULATION, 0);
  }
  uint64_t matable_population() const {
    return GetField<uint64_t>(VT_MATABLE_POPULATION, 0);
  }
  double conceiving_probability() const {
    return GetField<double>(VT_CONCEIVING_PROBABILITY, 0.0);
  }
  double mating_probability() const {
    return GetField<double>(VT_MATING_PROBABILITY, 0.0);
  }
  uint32_t mating_age_start() const {
    return GetField<uint32_t>(VT_MATING_AGE_START, 0);
  }
  uint32_t mating_age_end() const {
    return GetField<uint32_t>(VT_MATING_AGE_END, 0);
  }
  uint32_t max_age() const {
    return GetField<uint32_t>(VT_MAX_AGE, 0);
  }
  double mutation_probability() const {
    return GetField<double>(VT_MUTATION_PROBABILITY, 0.0);
  }
  double offsprings_factor() const {
    return GetField<double>(VT_OFFSPRINGS_FACTOR, 0.0);
  }
  double age_fitness_on_death_ratio() const {
    return GetField<double>(VT_AGE_FITNESS_ON_DEATH_RATIO, 0.0);
  }
  double height_on_vitality() const {
    return GetField<double>(VT_HEIGHT_ON_VITALITY, 0.0);
  }
  double weight_on_vitality() const {
    return GetField<double>(VT_WEIGHT_ON_VITALITY, 0.0);
  }
  double theoretical_maximum_base_height() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_HEIGHT, 0.0);
  }
  double theoretical_maximum_base_vitality() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_VITALITY, 0.0);
  }
  double theoretical_maximum_base_weight() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_BASE_WEIGHT, 0.0);
  }
  double theoretical_maximum_height() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT, 0.0);
  }
  double theoretical_maximum_weight() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT, 0.0);
  }
  double theoretical_maximum_height_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, 0.0);
  }
  double theoretical_maximum_vitality_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, 0.0);
  }
  double theoretical_maximum_weight_multiplier() const {
    return GetField<double>(VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, 0.0);
  }
  uint64_t average_generation() const {
    return GetField<uint64_t>(VT_AVERAGE_GENERATION, 0);
  }
  double average_immunity() const {
    return GetField<double>(VT_AVERAGE_IMMUNITY, 0.0);
  }
  uint32_t average_age() const {
    return GetField<uint32_t>(VT_AVERAGE_AGE, 0);
  }
  double average_height() const {
    return GetField<double>(VT_AVERAGE_HEIGHT, 0.0);
  }
  double average_weight() const {
    return GetField<double>(VT_AVERAGE_WEIGHT, 0.0);
  }
  double average_max_vitality_at_age() const {
    return GetField<double>(VT_AVERAGE_MAX_VITALITY_AT_AGE, 0.0);
  }
  double average_static_fitness() const {
    return GetField<double>(VT_AVERAGE_STATIC_FITNESS, 0.0);
  }
  double average_age_death_factor() const {
    return GetField<double>(VT_AVERAGE_AGE_DEATH_FACTOR, 0.0);
  }
  double average_fitness_death_factor() const {
    return GetField<double>(VT_AVERAGE_FITNESS_DEATH_FACTOR, 0.0);
  }
  double average_death_factor() const {
    return GetField<double>(VT_AVERAGE_DEATH_FACTOR, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_YEAR) &&
           VerifyField<uint64_t>(verifier, VT_POPULATION) &&
           VerifyField<uint64_t>(verifier, VT_MATABLE_POPULATION) &&
           VerifyField<double>(verifier, VT_CONCEIVING_PROBABILITY) &&
           VerifyField<double>(verifier, VT_MATING_PROBABILITY) &&
           VerifyField<uint32_t>(verifier, VT_MATING_AGE_START) &&
           VerifyField<uint32_t>(verifier, VT_MATING_AGE_END) &&
           VerifyField<uint32_t>(verifier, VT_MAX_AGE) &&
           VerifyField<double>(verifier, VT_MUTATION_PROBABILITY) &&
           VerifyField<double>(verifier, VT_OFFSPRINGS_FACTOR) &&
           VerifyField<double>(verifier, VT_AGE_FITNESS_ON_DEATH_RATIO) &&
           VerifyField<double>(verifier, VT_HEIGHT_ON_VITALITY) &&
           VerifyField<double>(verifier, VT_WEIGHT_ON_VITALITY) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_HEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_VITALITY) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_BASE_WEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_HEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_WEIGHT) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER) &&
           VerifyField<double>(verifier, VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER) &&
           VerifyField<uint64_t>(verifier, VT_AVERAGE_GENERATION) &&
           VerifyField<double>(verifier, VT_AVERAGE_IMMUNITY) &&
           VerifyField<uint32_t>(verifier, VT_AVERAGE_AGE) &&
           VerifyField<double>(verifier, VT_AVERAGE_HEIGHT) &&
           VerifyField<double>(verifier, VT_AVERAGE_WEIGHT) &&
           VerifyField<double>(verifier, VT_AVERAGE_MAX_VITALITY_AT_AGE) &&
           VerifyField<double>(verifier, VT_AVERAGE_STATIC_FITNESS) &&
           VerifyField<double>(verifier, VT_AVERAGE_AGE_DEATH_FACTOR) &&
           VerifyField<double>(verifier, VT_AVERAGE_FITNESS_DEATH_FACTOR) &&
           VerifyField<double>(verifier, VT_AVERAGE_DEATH_FACTOR) &&
           verifier.EndTable();
  }
};

struct PlantBuilder {
  typedef Plant Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_year(uint64_t year) {
    fbb_.AddElement<uint64_t>(Plant::VT_YEAR, year, 0);
  }
  void add_population(uint64_t population) {
    fbb_.AddElement<uint64_t>(Plant::VT_POPULATION, population, 0);
  }
  void add_matable_population(uint64_t matable_population) {
    fbb_.AddElement<uint64_t>(Plant::VT_MATABLE_POPULATION, matable_population, 0);
  }
  void add_conceiving_probability(double conceiving_probability) {
    fbb_.AddElement<double>(Plant::VT_CONCEIVING_PROBABILITY, conceiving_probability, 0.0);
  }
  void add_mating_probability(double mating_probability) {
    fbb_.AddElement<double>(Plant::VT_MATING_PROBABILITY, mating_probability, 0.0);
  }
  void add_mating_age_start(uint32_t mating_age_start) {
    fbb_.AddElement<uint32_t>(Plant::VT_MATING_AGE_START, mating_age_start, 0);
  }
  void add_mating_age_end(uint32_t mating_age_end) {
    fbb_.AddElement<uint32_t>(Plant::VT_MATING_AGE_END, mating_age_end, 0);
  }
  void add_max_age(uint32_t max_age) {
    fbb_.AddElement<uint32_t>(Plant::VT_MAX_AGE, max_age, 0);
  }
  void add_mutation_probability(double mutation_probability) {
    fbb_.AddElement<double>(Plant::VT_MUTATION_PROBABILITY, mutation_probability, 0.0);
  }
  void add_offsprings_factor(double offsprings_factor) {
    fbb_.AddElement<double>(Plant::VT_OFFSPRINGS_FACTOR, offsprings_factor, 0.0);
  }
  void add_age_fitness_on_death_ratio(double age_fitness_on_death_ratio) {
    fbb_.AddElement<double>(Plant::VT_AGE_FITNESS_ON_DEATH_RATIO, age_fitness_on_death_ratio, 0.0);
  }
  void add_height_on_vitality(double height_on_vitality) {
    fbb_.AddElement<double>(Plant::VT_HEIGHT_ON_VITALITY, height_on_vitality, 0.0);
  }
  void add_weight_on_vitality(double weight_on_vitality) {
    fbb_.AddElement<double>(Plant::VT_WEIGHT_ON_VITALITY, weight_on_vitality, 0.0);
  }
  void add_theoretical_maximum_base_height(double theoretical_maximum_base_height) {
    fbb_.AddElement<double>(Plant::VT_THEORETICAL_MAXIMUM_BASE_HEIGHT, theoretical_maximum_base_height, 0.0);
  }
  void add_theoretical_maximum_base_vitality(double theoretical_maximum_base_vitality) {
    fbb_.AddElement<double>(Plant::VT_THEORETICAL_MAXIMUM_BASE_VITALITY, theoretical_maximum_base_vitality, 0.0);
  }
  void add_theoretical_maximum_base_weight(double theoretical_maximum_base_weight) {
    fbb_.AddElement<double>(Plant::VT_THEORETICAL_MAXIMUM_BASE_WEIGHT, theoretical_maximum_base_weight, 0.0);
  }
  void add_theoretical_maximum_height(double theoretical_maximum_height) {
    fbb_.AddElement<double>(Plant::VT_THEORETICAL_MAXIMUM_HEIGHT, theoretical_maximum_height, 0.0);
  }
  void add_theoretical_maximum_weight(double theoretical_maximum_weight) {
    fbb_.AddElement<double>(Plant::VT_THEORETICAL_MAXIMUM_WEIGHT, theoretical_maximum_weight, 0.0);
  }
  void add_theoretical_maximum_height_multiplier(double theoretical_maximum_height_multiplier) {
    fbb_.AddElement<double>(Plant::VT_THEORETICAL_MAXIMUM_HEIGHT_MULTIPLIER, theoretical_maximum_height_multiplier, 0.0);
  }
  void add_theoretical_maximum_vitality_multiplier(double theoretical_maximum_vitality_multiplier) {
    fbb_.AddElement<double>(Plant::VT_THEORETICAL_MAXIMUM_VITALITY_MULTIPLIER, theoretical_maximum_vitality_multiplier, 0.0);
  }
  void add_theoretical_maximum_weight_multiplier(double theoretical_maximum_weight_multiplier) {
    fbb_.AddElement<double>(Plant::VT_THEORETICAL_MAXIMUM_WEIGHT_MULTIPLIER, theoretical_maximum_weight_multiplier, 0.0);
  }
  void add_average_generation(uint64_t average_generation) {
    fbb_.AddElement<uint64_t>(Plant::VT_AVERAGE_GENERATION, average_generation, 0);
  }
  void add_average_immunity(double average_immunity) {
    fbb_.AddElement<double>(Plant::VT_AVERAGE_IMMUNITY, average_immunity, 0.0);
  }
  void add_average_age(uint32_t average_age) {
    fbb_.AddElement<uint32_t>(Plant::VT_AVERAGE_AGE, average_age, 0);
  }
  void add_average_height(double average_height) {
    fbb_.AddElement<double>(Plant::VT_AVERAGE_HEIGHT, average_height, 0.0);
  }
  void add_average_weight(double average_weight) {
    fbb_.AddElement<double>(Plant::VT_AVERAGE_WEIGHT, average_weight, 0.0);
  }
  void add_average_max_vitality_at_age(double average_max_vitality_at_age) {
    fbb_.AddElement<double>(Plant::VT_AVERAGE_MAX_VITALITY_AT_AGE, average_max_vitality_at_age, 0.0);
  }
  void add_average_static_fitness(double average_static_fitness) {
    fbb_.AddElement<double>(Plant::VT_AVERAGE_STATIC_FITNESS, average_static_fitness, 0.0);
  }
  void add_average_age_death_factor(double average_age_death_factor) {
    fbb_.AddElement<double>(Plant::VT_AVERAGE_AGE_DEATH_FACTOR, average_age_death_factor, 0.0);
  }
  void add_average_fitness_death_factor(double average_fitness_death_factor) {
    fbb_.AddElement<double>(Plant::VT_AVERAGE_FITNESS_DEATH_FACTOR, average_fitness_death_factor, 0.0);
  }
  void add_average_death_factor(double average_death_factor) {
    fbb_.AddElement<double>(Plant::VT_AVERAGE_DEATH_FACTOR, average_death_factor, 0.0);
  }
  explicit PlantBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Plant> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Plant>(end);
    return o;
  }
};

inline flatbuffers::Offset<Plant> CreatePlant(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t year = 0,
    uint64_t population = 0,
    uint64_t matable_population = 0,
    double conceiving_probability = 0.0,
    double mating_probability = 0.0,
    uint32_t mating_age_start = 0,
    uint32_t mating_age_end = 0,
    uint32_t max_age = 0,
    double mutation_probability = 0.0,
    double offsprings_factor = 0.0,
    double age_fitness_on_death_ratio = 0.0,
    double height_on_vitality = 0.0,
    double weight_on_vitality = 0.0,
    double theoretical_maximum_base_height = 0.0,
    double theoretical_maximum_base_vitality = 0.0,
    double theoretical_maximum_base_weight = 0.0,
    double theoretical_maximum_height = 0.0,
    double theoretical_maximum_weight = 0.0,
    double theoretical_maximum_height_multiplier = 0.0,
    double theoretical_maximum_vitality_multiplier = 0.0,
    double theoretical_maximum_weight_multiplier = 0.0,
    uint64_t average_generation = 0,
    double average_immunity = 0.0,
    uint32_t average_age = 0,
    double average_height = 0.0,
    double average_weight = 0.0,
    double average_max_vitality_at_age = 0.0,
    double average_static_fitness = 0.0,
    double average_age_death_factor = 0.0,
    double average_fitness_death_factor = 0.0,
    double average_death_factor = 0.0) {
  PlantBuilder builder_(_fbb);
  builder_.add_average_death_factor(average_death_factor);
  builder_.add_average_fitness_death_factor(average_fitness_death_factor);
  builder_.add_average_age_death_factor(average_age_death_factor);
  builder_.add_average_static_fitness(average_static_fitness);
  builder_.add_average_max_vitality_at_age(average_max_vitality_at_age);
  builder_.add_average_weight(average_weight);
  builder_.add_average_height(average_height);
  builder_.add_average_immunity(average_immunity);
  builder_.add_average_generation(average_generation);
  builder_.add_theoretical_maximum_weight_multiplier(theoretical_maximum_weight_multiplier);
  builder_.add_theoretical_maximum_vitality_multiplier(theoretical_maximum_vitality_multiplier);
  builder_.add_theoretical_maximum_height_multiplier(theoretical_maximum_height_multiplier);
  builder_.add_theoretical_maximum_weight(theoretical_maximum_weight);
  builder_.add_theoretical_maximum_height(theoretical_maximum_height);
  builder_.add_theoretical_maximum_base_weight(theoretical_maximum_base_weight);
  builder_.add_theoretical_maximum_base_vitality(theoretical_maximum_base_vitality);
  builder_.add_theoretical_maximum_base_height(theoretical_maximum_base_height);
  builder_.add_weight_on_vitality(weight_on_vitality);
  builder_.add_height_on_vitality(height_on_vitality);
  builder_.add_age_fitness_on_death_ratio(age_fitness_on_death_ratio);
  builder_.add_offsprings_factor(offsprings_factor);
  builder_.add_mutation_probability(mutation_probability);
  builder_.add_mating_probability(mating_probability);
  builder_.add_conceiving_probability(conceiving_probability);
  builder_.add_matable_population(matable_population);
  builder_.add_population(population);
  builder_.add_year(year);
  builder_.add_average_age(average_age);
  builder_.add_max_age(max_age);
  builder_.add_mating_age_end(mating_age_end);
  builder_.add_mating_age_start(mating_age_start);
  return builder_.Finish();
}

struct Plant::Traits {
  using type = Plant;
  static auto constexpr Create = CreatePlant;
};

inline const Ecosystem::Plant *GetPlant(const void *buf) {
  return flatbuffers::GetRoot<Ecosystem::Plant>(buf);
}

inline const Ecosystem::Plant *GetSizePrefixedPlant(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Ecosystem::Plant>(buf);
}

inline bool VerifyPlantBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Ecosystem::Plant>(nullptr);
}

inline bool VerifySizePrefixedPlantBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Ecosystem::Plant>(nullptr);
}

inline void FinishPlantBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Ecosystem::Plant> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlantBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Ecosystem::Plant> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Ecosystem

#endif  // FLATBUFFERS_GENERATED_PLANT_ECOSYSTEM_H_
